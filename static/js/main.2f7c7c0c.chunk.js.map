{"version":3,"sources":["components/Api/Api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["getUser","userId","fetch","then","response","json","TodoList","todos","selectedUserId","handleSelectUser","className","map","todo","classNames","completed","type","checked","readOnly","title","onClick","id","CurrentUser","selectedUser","clearSelectedUser","name","email","phone","App","state","selectedUserInfo","sortByStatus","sortByName","filterTodos","filteredTodos","filter","toLowerCase","includes","toLocaleLowerCase","setState","user","handleSelectSortBy","event","value","target","handleSortByName","this","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f7c7c0c.chunk.js","sourcesContent":["const TODO_URL = 'https://mate.academy/students-api/todos';\nconst USER_URL = 'https://mate.academy/students-api/users/';\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return fetch(TODO_URL)\n    .then(response => response.json());\n}\n\nexport function getUser(userId: number): Promise<User> {\n  return fetch(`${USER_URL}${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  handleSelectUser: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, selectedUserId, handleSelectUser }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={\n              classNames('TodoList__item', {\n                'TodoList__item--checked': todo.completed,\n                'TodoList__item--unchecked': !todo.completed,\n              })\n            }\n          >\n            {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              onClick={() => handleSelectUser(todo.userId)}\n              className={\n                classNames('TodoList__user-button', 'button', {\n                  'TodoList__user-button--selected': selectedUserId === todo.userId,\n                })\n              }\n              type=\"button\"\n            >\n              User #\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUser: User | null\n  clearSelectedUser: () => void\n};\n\nexport const CurrentUser: React.FC<Props> = ({ selectedUser, clearSelectedUser }) => (\n  <>\n    {selectedUser\n      ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${selectedUser.id}`}\n            </span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n          <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n          <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n          <br />\n        </div>\n      )\n      : <span>User not found</span>}\n\n    <button\n      onClick={() => clearSelectedUser()}\n      type=\"button\"\n      className=\"button TodoList__user-button--selected clear-button\"\n    >\n      Clear\n    </button>\n  </>\n);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getAllTodos, getUser } from './components/Api/Api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ntype Props = {};\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  selectedUserInfo: User | null;\n  sortByStatus: string;\n  sortByName: string;\n}\n\nclass App extends React.Component<Props, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    selectedUserInfo: null,\n    sortByStatus: 'all',\n    sortByName: '',\n  };\n\n  componentDidMount() {\n    getAllTodos()\n      .then(todos => {\n        this.setState({\n          todos: [...todos],\n        });\n      });\n  }\n\n  filterTodos = (): Todo[] => {\n    const { todos, sortByStatus, sortByName } = this.state;\n    let filteredTodos;\n\n    switch (sortByStatus) {\n      case 'active':\n        filteredTodos = todos.filter(todo => !todo.completed);\n        break;\n\n      case 'completed':\n        filteredTodos = todos.filter(todo => todo.completed);\n        break;\n\n      default:\n        filteredTodos = [...todos];\n    }\n\n    return filteredTodos.filter(todo => (\n      todo.title.toLowerCase().includes(sortByName.toLocaleLowerCase())\n    ));\n  };\n\n  handleSelectUser = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n\n    if (userId !== this.state.selectedUserId) {\n      getUser(userId).then(user => {\n        this.setState({\n          selectedUserInfo: user,\n        });\n      });\n    }\n  };\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  handleSelectSortBy = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      sortByStatus: value,\n    });\n  };\n\n  handleSortByName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      sortByName: value,\n    });\n  };\n\n  render() {\n    const { selectedUserId, selectedUserInfo } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <span>\n            Status:\n            <select\n              value={this.state.sortByStatus}\n              onChange={this.handleSelectSortBy}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"notCompleted\">Not completed</option>\n            </select>\n            <br />\n            Find by name:\n            <input\n              type=\"text\"\n              value={this.state.sortByName}\n              onChange={this.handleSortByName}\n            />\n          </span>\n          <TodoList\n            todos={this.filterTodos()}\n            selectedUserId={selectedUserId}\n            handleSelectUser={this.handleSelectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId >= 3 ? (\n              <CurrentUser\n                selectedUser={selectedUserInfo}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}